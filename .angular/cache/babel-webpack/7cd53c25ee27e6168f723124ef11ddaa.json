{"ast":null,"code":"/**\r\n *\r\n */\nexport class Cell {\n  /**\r\n   * Create a cell in a maze.\r\n   * @param row rowID of the cell in a maze. integer, row>=0\r\n   * @param col colID of the cell in a maze. integer, col>=0\r\n   */\n  constructor(row = 0, col = 0) {\n    this.row = row;\n    this.col = col;\n    this.northEdge = true;\n    this.eastEdge = true;\n    this.westEdge = true;\n    this.southEdge = true;\n    this.neighbors = [];\n    /**\r\n     * a flag used to indicate if the cell has been traversed or not when finding a maze path\r\n     */\n\n    this.traversed = false;\n    /**\r\n     * a flag used to indicate if the cell has been visited or not when hunt-and-kill\r\n     */\n\n    this.visited = false;\n  }\n  /**\r\n   * The number of Edges in this cell.\r\n   * The nEdges counts all four edges. If an edge is false, then 0.\r\n   */\n\n\n  get nEdges() {\n    return (this.northEdge ? 1 : 0) + (this.southEdge ? 1 : 0) + (this.westEdge ? 1 : 0) + (this.eastEdge ? 1 : 0);\n  }\n\n  connectTo(another) {\n    if (!another) return;\n\n    if (this.row === another.row) {\n      if (this.col - 1 === another.col) {\n        this.westEdge = false;\n        another.eastEdge = false;\n      } else if (this.col + 1 === another.col) {\n        this.eastEdge = false;\n        another.westEdge = false;\n      } else {\n        return;\n      }\n    } else if (this.col === another.col) {\n      if (this.row - 1 === another.row) {\n        this.northEdge = false;\n        another.southEdge = false;\n      } else if (this.row + 1 === another.row) {\n        this.southEdge = false;\n        another.northEdge = false;\n      } else {\n        return;\n      }\n    } else {\n      return;\n    }\n\n    this.visited = true;\n    another.visited = true;\n  }\n\n  equals(another) {\n    return this.row === another.row && this.col === another.col;\n  }\n\n  isConnectedTo(another) {\n    if (this.row === another.row) {\n      if (this.col - 1 === another.col) {\n        if (this.westEdge === false && another.eastEdge === false) {\n          return true;\n        }\n      }\n\n      if (this.col + 1 === another.col) {\n        if (this.eastEdge === false && another.westEdge === false) {\n          return true;\n        }\n      }\n    }\n\n    if (this.col === another.col) {\n      if (this.row - 1 === another.row) {\n        if (this.northEdge === false && another.southEdge === false) {\n          return true;\n        }\n      }\n\n      if (this.row + 1 === another.row) {\n        if (this.southEdge === false && another.northEdge === false) {\n          return true;\n        }\n      }\n    }\n\n    return false;\n  }\n\n}","map":null,"metadata":{},"sourceType":"module"}